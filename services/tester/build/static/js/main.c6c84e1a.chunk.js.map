{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","text","size","results","error","handleTextChange","event","_this","setState","target","value","handleSelectChange","handleSubmit","fetch","method","body","JSON","stringify","then","res","json","result","react_default","a","createElement","className","AppBar_default","position","color","Toolbar_default","Typography_default","variant","noWrap","rel","href","Grid_default","styles","width","container","item","xs","this","props","classes","grid","TextField_default","id","label","onChange","FormControl_default","InputLabel_default","htmlFor","Select_default","select","inputProps","name","MenuItem_default","Button_default","fullWidth","onClick","Paper_default","paper","List_default","ListSubheader_default","map","index","ListItem_default","key","ListItemText_default","Component","withStyles","list","maxWidth","overflow","maxHeight","paddingBottom","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6c84e1a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nconst styles = {\n  list: {\n    width: '100%',\n    maxWidth: 360,\n    position: 'relative',\n    overflow: 'auto',\n    maxHeight: 300,\n  },\n  text: {\n    width: 400,\n    \n  },\n  select: {\n    width: 400\n  },\n  grid: {\n    paddingBottom: 10\n  },\n  paper: {\n    width: 700\n  }\n}\n\nclass App extends Component {\n  state = {\n    text: '',\n    size: 1,\n    results: [],\n    error: null\n  }\n\n  handleTextChange = (event) => {\n    this.setState({ text: event.target.value });\n  }\n\n  handleSelectChange = (event) => {\n    this.setState({ size: event.target.value });\n  }\n\n  handleSubmit = () => {\n    fetch(\"http://localhost:5000/bruteforce/\", {\n      method: 'post',\n      body: JSON.stringify({\n        text: this.state.text,\n        size: this.state.size\n      })\n    })\n    .then(res => res.json())\n    .then(\n      (result) => {\n        this.setState({\n          results: result\n        });\n      },\n      // Note: it's important to handle errors here\n      // instead of a catch() block so that we don't swallow\n      // exceptions from actual bugs in components.\n      (error) => {\n        this.setState({\n          error\n        });\n      }\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AppBar position=\"absolute\" color=\"default\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\" noWrap>\n              Vantage Test - Decrypt it!\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\" />\n        <Grid className=\"App-header\" styles={{width:'100%'}} container>\n          <Grid item xs={12} className={this.props.classes.grid}>\n            <TextField\n              id=\"text\"\n              label=\"Encrypted text\"\n              value={this.state.text}\n              className={this.props.classes.text}\n              onChange={this.handleTextChange}\n            />\n          </Grid>\n          <Grid item xs={12} className={this.props.classes.grid}>\n            <FormControl>\n              <InputLabel htmlFor=\"key-size\">Key size</InputLabel>\n              <Select\n                onChange={this.handleSelectChange}\n                className={this.props.classes.select}\n                value={this.state.size}\n                inputProps={{\n                  name: 'size',\n                  id: 'key-size',\n                }}\n              >\n                <MenuItem value={1}>1</MenuItem>\n                <MenuItem value={2}>2</MenuItem>\n                <MenuItem value={3}>3</MenuItem>\n                <MenuItem value={4}>4</MenuItem>\n                <MenuItem value={5}>5</MenuItem>\n                <MenuItem value={6}>6</MenuItem>\n                <MenuItem value={7}>7</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n\n          <Grid item xs={12} className={this.props.classes.grid}>\n            <Button fullWidth onClick={this.handleSubmit}>Submit</Button>\n          </Grid>\n\n          <Paper className={this.props.classes.paper}>\n            <List>\n            <ListSubheader>Suggested decryptions</ListSubheader>\n            {\n              this.state.results.map((item, index) => (\n                <ListItem key={index}>\n                  <ListItemText>{item}</ListItemText>\n                </ListItem>\n              ))\n            }\n          </List>\n        </Paper>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}